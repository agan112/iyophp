<?php namespace App\Model;

use Illuminate\Database\Eloquent\Model;
use MyRedis;
use Log;
use DB;
use Monolog\Logger;
use Monolog\Handler\StreamHandler;
use Illuminate\Log\Writer;
use Illuminate\Database\Eloquent\SoftDeletes;

class IyoTopic extends Model {

	use SoftDeletes;
	protected $dates = ['deleted_at'];

	const PREFIX="topic";

	public static $attrnames = array(
		array("cache"=>"tid", "db"=> "id", "return"=>"tid"),
		array("cache"=>"title", "db"=> "title", "return"=>"title"),
		array("cache"=>"from", "db"=> "from", "return"=>"from"),
		array("cache"=>"image", "db"=> "image", "return"=>"image"),
		array("cache"=>"content", "db"=> "body", "return"=>"content"),
		array("cache"=>"uid", "db"=> "uid", "return"=>"uid"),
		array("cache"=>"numOfReplay", "db"=> "reply_count", "return"=>"numOfReplay"),
		array("cache"=>"numOfView", "db"=> "view_count", "return"=>"numOfView"),
		array("cache"=>"numOfLike", "db"=> "like_count", "return"=>"numOfLike"),
		array("cache"=>"abstract", "db"=> "abstract", "return"=>"abstract"),
		array("cache"=>"created_at", "db"=> "created_at", "return"=>"created_at"),
		array("cache"=>"numOfForward", "db"=> "forward_count", "return"=>"numOfForward"),
		array("cache"=>"allowedComment", "db"=> "allowed_comment", "return"=>"allowedComment"),
		array("cache"=>"deletedTimer", "db"=> "deleted_timer", "return"=>"deletedTimer"),
		array("cache"=>"pid", "db"=> "pid", "return"=>"pid"),
	);

	const TYPECOMMENTLIST="topiccomment";
	const COMMENTLIST="topic:%s:comment";
	const TOPIC="topic:%s";
	const USERTIMELINE = "user:%s:ustimeline";
	const USERTOPIC = "user:%s:topic";
	const HOTTOPIC = "hot:1:topic";
	const TYPEUSERTIMELINE = "ustimeline";
	const TYPEUSERTOPIC = "usertopic";
	const TYPEHOTTOPIC = "hottopic";
	const TYPEEXPIRED=6;

	public static function converDateTime($value)
	{
		return date("Y年m月d日", strtotime($value));
	}

	public static function saveOrUpdate($title, $abstract, $from, $image, $uid, $body, $tid=0, $pid=0, $allowedComment=1, $deletedTimer=NULL)
	{
		if( $tid == 0 ) {
			$topic = new IyoTopic();
		} else {
			$topic = IyoTopic::find($tid);
		}

		$topic->title = $title;
		$topic->abstract = $abstract;
		$topic->from = $from;
		$topic->image = $image;
		$topic->uid = $uid;
		$topic->body = $body;
		$topic->pid = $pid;
		$topic->allowed_comment = $allowedComment;
		$topic->deleted_timer = $deletedTimer;

		$topic->save();

		$redis = MyRedis::connection("default");
		$key = sprintf(IyoTopic::USERTOPIC, $uid);
		$redis->zadd($key,strtotime($topic["created_at"]),$topic['id']);

		IyoTopic::reloadCache($tid);
		$topic = IyoTopic::queryById($tid);

		return $topic;
	}

	public static function destroy($id)
	{
		$topic = IyoTopic::find($id);
		$topic->delete();
		IyoTopic::cleanCache($id);
	}

	public static function addArrayValue($name, $value) {
		$redis = MyRedis::connection("default");
		if( $redis->exists($name) ) {
			$redis->lpush($name, 0, $value);
		}
	}

	public static function rmvArrayValue($name, $value) {
		$redis = MyRedis::connection("default");
		if( $redis->exists($name) ) {
			$redis->lrem($name, 0, $value);
		}
	}

	public static function getArrayValue($id, $attrname, $attrvalue, $name, $num=0, $current=0) {
		$redis = MyRedis::connection("default");
		Log::info('get Array Value, attrname:'.$attrname." name:".$name." num:".$num." current:".$current);
		if(!$redis->exists($name)) {
			$list = [];

			Log::info('getArrayValue cache does not exist');

			if( $attrname == IyoTopic::TYPEUSERTOPIC ) {
				$list = IyoTopic::where('uid', $attrvalue)->orderBy('created_at', 'asc')
					->take(1100)->get(["id", "created_at"]);
			} else if ( $attrname == IyoTopic::TYPEUSERTIMELINE) {
				$list = IyoTopic::whereIn('uid', $attrvalue)->orderBy('created_at', 'asc')
					->take(1100)->get(["id", "created_at"]);
			} else if ( $attrname == IyoTopic::TYPEHOTTOPIC ) {
				$list = IyoTopic::where('created_at', '>', time()-1000*24*60*60)
					->orderBy('view_count')->take(200)->get(["id", "created_at"]);
			} else if ( $attrname == IyoTopic::TYPECOMMENTLIST ) {
				$list = IyoComment::where('tid', $attrvalue)->orderby('created_at','asc')->get(["id", "created_at"]);
			}

			$logid = "";
			foreach( $list as $log ) {
				$logid = $log["id"]." ";
			}
			Log::info('getArrayValue, logid is :'.$logid);


			$sqls = DB::getQueryLog();
            $logger = new Writer(new Logger("info"));
			$logger->useFiles(storage_path().'/logs/sql.log');
			$logger->info($sqls);

			foreach( $list as $tid ) {
				$logger->info($tid);
				$redis->zadd($name,strtotime($tid["created_at"]),$tid['id']);
			}

			//$redis->pexpire($name, IyoTopic::TYPEEXPIRED);
		}

		$length = $redis->zcard($name);
		$tlist = [];
		if( $num == 0 ) {
			$stop = -1;
			$tlist = $redis->zrevrange($name, $current, $stop);
		} else if( $current > 1000 ) {
			$stop = $current + $num - 1;

			if( $attrname == IyoTopic::TYPEUSERTOPIC ) {
				$tlist = IyoTopic::where('uid', $attrvalue)->orderBy(('created_at'))
					->skip($current)->take($num)->get(["id"]);
			} else if ( $attrname == IyoTopic::TYPEUSERTIMELINE) {
				$tlist = [];
				//$tlist = IyoTopic::whereIn('uid', $uslist)->orderBy(('created_at'))
			//		->skip($current)->take($num)->get(["id"]);
			} else if ( $attrname == IyoTopic::TYPEHOTTOPIC ) {
				$tlist = [];
			} else if ( $attrname == IyoTopic::TYPECOMMENTLIST ) {
				$stop = $current + $num - 1;
				if( $stop > $length - 1 ) {
					$stop = $length - 1;
				}
				$tlist = $redis->zrevrange($name, $current, $stop);
			}
		} else {
			$stop = $current + $num - 1;
			if( $stop > $length - 1 ) {
				$stop = $length - 1;
			}
			$tlist = $redis->zrevrange($name, $current, $stop);
		}

		return $tlist;
	}

	public static function reloadCache($id) {
		IyoTopic::cleanCache($id);
		IyoTopic::loadDataInToCache($id);
	}

	public static function loadDataInToCache($id) {
		Log::info("IyoTopic loadDataInToCache enter");
		$redis = MyRedis::connection("default");
		$dbtopic = IyoTopic::find($id);
		if( is_null($dbtopic) ) return;
		$key = sprintf(IyoTopic::TOPIC, $id);
		foreach( self::$attrnames as $attrname ) {
			Log::info( "attribute is ".$attrname["cache"]." ".$attrname["db"]." ".$dbtopic[$attrname["db"]] );
			$redis->hmset($key, $attrname["cache"], $dbtopic[$attrname["db"]]);
		}
	}

	public static function cleanCache($id) {
		Log::info("IyoTopic cleanCache enter");
		$redis = MyRedis::connection("default");
		$key = sprintf(IyoTopic::TOPIC, $id);
		$redis->del($key);
	}

	public static function queryById($id)
	{
		$redis = MyRedis::connection("default");
		$key = sprintf(IyoTopic::TOPIC, $id);

		if( !$redis->exists($key) ) {
			IyoTopic::reloadCache($id);
		}

		if( !$redis->exists($key) ) {
			return null;
		}

		$topic = [];
		foreach( self::$attrnames as $attrname ) {
			$topic[$attrname["return"]] = $redis->hget($key, $attrname["cache"]);
			if( $attrname["cache"] == "created_at" ) {
				$topic["created_at"] = date("Y年m月d日", strtotime($topic["created_at"]));
			}
			Log::info( "attribute is ".$attrname["return"]." ".$attrname["cache"]." ".$topic[$attrname["return"]]);
		}
		return $topic;
	}

	public static function queryCommentIds($tid, $num=0, $current=0)
	{
		$key = sprintf(IyoTopic::COMMENTLIST, $tid);
		$tlist = IyoTopic::getArrayValue(0, IyoTopic::TYPECOMMENTLIST, $tid, $key, $num, $current);
		return $tlist;
	}

	public static function delCommentFromCacheList($tid, $cid) {
		$key = sprintf(IyoTopic::COMMENTLIST, $tid);
		IyoTopic::rmvArrayValue($key, $cid);
	}

	public static function addCommentFromCacheList($tid, $cid) {
		$key = sprintf(IyoTopic::COMMENTLIST, $tid);
		IyoTopic::addArrayValue($key, $cid);
	}

	public static function cleanCommentCache($tid) {
		$redis = MyRedis::connection("default");
		$key = sprintf(IyoTopic::COMMENTLIST, $tid);
		if( $redis->exists($key) ) {
			$redis->del($key);
		}
	}

	public static function queryTopicIdsByTime($uid, $uslist, $num=0, $current=0)
	{
		$redis = MyRedis::connection("default");

		if( $current == 0 ) {
			$key = sprintf(IyoTopic::USERTIMELINE, $uid);
			if( $redis->exists($key) ) {
				$redis->del($key);
			}
			foreach( $uslist as $fid ) {
				$userlist = sprintf(IyoTopic::USERTOPIC, $fid);
				if( !$redis->exists($userlist) ) {
					IyoTopic::queryTopicIdsByUser($fid);
				}
				if( $redis->exists($key) ) {
					$redis->zunionstore($key, 2, $key, $userlist);
				} else {
					$selflist = sprintf(IyoTopic::USERTOPIC, $uid);
					if( !$redis->exists($selflist) ) {
						IyoTopic::queryTopicIdsByUser($uid);
					}
					$redis->zunionstore($key, 2, $userlist, $selflist);
				}
			}
		}

		$tlist = [];
		if( $redis->exists($key) ) {
			$tlist = $redis->zrevrange($key, $current, $current+$num-1);
		}

		return $tlist;
	}

	public static function queryTopicIdsByUser($uid, $num=0, $current=0)
	{
		$key = sprintf(IyoTopic::USERTOPIC, $uid);
		$tlist = IyoTopic::getArrayValue($uid, IyoTopic::TYPEUSERTOPIC, $uid, $key, $num, $current);
		return $tlist;
	}

	public static function queryHotTopicIds($num=0, $current=0)
	{
		$tids = IyoTopic::getArrayValue(0, IyoTopic::TYPEHOTTOPIC, 0, IyoTopic::HOTTOPIC, $num, $current);
		return $tids;
	}

	public static function incrValue($key, $id, $field, $cfield) {
		DB::table('iyo_topics')->where('id', $id)->increment($field);
		$redis = MyRedis::connection("default");
		if( $redis->exists($key) ) {
			$redis->hincrby($key, $cfield, 1);
		}
	}

	public static function decrValue($key, $id, $field, $cfield) {
		DB::table('iyo_topics')->where('id', $id)->decrement($field);
		$redis = MyRedis::connection("default");
		if( $redis->exists($key) ) {
			$redis->hincrby($key, $cfield, -1);
		}
	}

	public static function incrNumOfView($id) {
		IyoTopic::incrValue(IyoTopic::PREFIX.":$id", $id, "view_count", "numOfView");
	}

	public static function incrNumOfForward($id) {
		IyoTopic::incrValue(IyoTopic::PREFIX.":$id", $id, "forward_count", "numOfForward");
	}

	public static function decrNumOfForward($id) {
		IyoTopic::decrValue(IyoTopic::PREFIX.":$id", $id, "forward_count", "numOfForward");
	}

	public static function incrNumOfLike($id) {
		IyoTopic::incrValue(IyoTopic::PREFIX.":$id", $id, "like_count", "numOfLike");
	}

	public static function decrNumOfLike($id) {
		IyoTopic::decrValue(IyoTopic::PREFIX.":$id", $id, "like_count", "numOfLike");
	}

	public static function incrNumOfReply($id) {
		IyoTopic::incrValue(IyoTopic::PREFIX.":$id", $id, "reply_count", "numOfLike");
	}

	public static function decrNumOfReply($id) {
		IyoTopic::decrValue(IyoTopic::PREFIX.":$id", $id, "reply_count", "numOfLike");
	}
}
